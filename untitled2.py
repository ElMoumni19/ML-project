# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sENh7dV-ZnIp_BSjsQNzImnJgyofZO3m
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load in 

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt
# Input data files are available in the "../input/" directory.
# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory
!pip install drive
import os
from google.colab import drive

"""Mount google drive"""

drive.mount('/content/drive')

path1= 'drive/Mon Drive/dataset1'
path2= 'drive/Mon Drive'

df1= pd.read_csv ('/content/drive/MyDrive/dataset1/data.csv')
df1.head(10)

df2= pd.read_csv ('/content/drive/MyDrive/dataset2/labels.csv')
df2.head(10)

df2.head(10)

#X = df1.iloc[:,2:6]
X = df1.iloc[:,[2,3]]
y = df2['Class']
X.head(10)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

from sklearn.decomposition import KernelPCA
kpca = KernelPCA(n_components = 2, kernel = 'rbf')
X_train = kpca.fit_transform(X_train)
X_test = kpca.transform(X_test)

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0)
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
cm

df2['Class'] = df2['Class'].replace(['BRCA'],'1.')
df2['Class'] = df2['Class'].replace(['PRAD'],'2.')
df2['Class'] = df2['Class'].replace(['LUAD'],'3.')
df2['Class'] = df2['Class'].replace(['KIRC'],'4.')
df2['Class'] = df2['Class'].replace(['COAD'],'5.')

df2.head()

#Visualizing the Training Set results

import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap

X_set, y_set = X_train, y_train
X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1,
                              step = 0.01),
                    np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1,
                              step = 0.01))
plt.contourf(X1,X2,classifier.predict(
    np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape), alpha=0.75,
    cmap=ListedColormap(('red','green')))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],
               c=ListedColormap(('red','green'))(i),label=j)
plt.title("Logistic Regression - Training Set")
plt.xlabel("KPCA1")
plt.ylabel("KPCA2")
plt.legend()
plt.show()

from sklearn.decomposition import KernelPCA
kpca = KernelPCA(n_components = 2, kernel = 'linear')
X_train = kpca.fit_transform(X_train)
X_test = kpca.transform(X_test)

from sklearn.decomposition import KernelPCA
kpca = KernelPCA(n_components = 2, kernel = 'poly')
X_train = kpca.fit_transform(X_train)
X_test = kpca.transform(X_test)

from sklearn.decomposition import KernelPCA
kpca = KernelPCA(n_components = 2, kernel = 'sigmoid')
X_train = kpca.fit_transform(X_train)
X_test = kpca.transform(X_test)

from sklearn.decomposition import KernelPCA
kpca = KernelPCA(n_components = 2, kernel = 'cosine')
X_train = kpca.fit_transform(X_train)
X_test = kpca.transform(X_test)

#Fitting Logistic Regression to the Training set
from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0)
classifier.fit(X_train,y_train)

#Predicting the Test set results
y_pred = classifier.predict(X_test)

#Making the confusion matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
cm

df2.head()

#Visualizing the Training Set results

import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap

X_set, y_set = X_train, y_train
X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1,
                              step = 0.01),
                    np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1,
                              step = 0.01))
plt.contourf(X1,X2,classifier.predict(
    np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape), alpha=0.75,
    cmap=ListedColormap(('red','green')))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],
               c=ListedColormap(('red','green'))(i),label=j)
plt.title("Logistic Regression - Training Set")
plt.xlabel("KPCA1")
plt.ylabel("KPCA2")
plt.legend()
plt.show()

#Visualizing the Test Set results
from matplotlib.colors import ListedColormap
X_set, y_set = X_test, y_test
X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1,
                              step = 0.01),
                    np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1,
                              step = 0.01))
plt.contourf(X1,X2,classifier.predict(
    np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape), alpha=0.75,
    cmap=ListedColormap(('red','green')))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],
               c=ListedColormap(('red','green'))(i),label=j)
plt.title("Logistic Regression - Test Set")
plt.xlabel("KPCA1")
plt.ylabel("KPCA2")
plt.legend()
plt.show()